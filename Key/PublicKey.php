<?php
include_once("Key.php");
class PublicKey extends Key{
	//public key exponent used in encryption
	public $e;
	
	/*
	 * PublicKey constructor
	 * 
	 * Initializes public key exponenet e
	 */
	protected function __construct($vals){
		parent::__construct($vals);
		$this->calculateExponent($vals["p"], $vals["q"], $vals["totient"]);
	}
	
	/*
	 * Calculate e
	 * 
	 * The public key exponent e can be generated in many different ways. In our implementation
	 * we use the value 65537 for e as recommended by Dan Boneh in his survey of RSA attacks. By choosing
	 * e as 65537 we can avoid what he calls Low Public Key exponent attacks that result from using other 
	 * common values for e such as 3.
	 * 
	 * e can also be generated by finding a value between 3 and n-1 that is relatively prime to the totient
	 * of n. This method takes a little bit longer and doesn't provide any more security than simply using 
	 * 65537 as the public key exponent. The wireframe for generating a value for $e is commented out in the code.
	 * $p - prime used to generate modulus n
	 * $q - prime used to generate modulus n
	 * $totient - totient(n) = (p-1)(q-1)
	 */
	private function calculateExponent($p, $q, $totient){
		//RECOMMENDED IN docs/RSA-survey.pdf pg 6 section 4
		$e = gmp_init(65537);
		
		/*
		$min = gmp_init(3);
		$max = gmp_sub($this->n, gmp_init(1));
		$check = gmp_init(1);

		do{
			//generate some random value for $e
		}while(gmp_cmp(gmp_gcd($e, $totient), $check) != 0);
		*/
		
		$this->e = $e;
	}
}
?>